{"version":3,"sources":["serviceWorker.js","componenets/Store.js","componenets/Buttons.js","componenets/Display.js","componenets/Settings.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","maxNumber","displayNumber","minNumber","disableClick","disableReset","disableSettings","store","createStore","state","action","type","onNewMaxValue","onNewMinValue","Button","render","className","onClick","props","onClickFunc","disabled","checkDisabled","title","React","Component","Display","MaxNumber","MinNumber","displayMax","Settings","errorClass","onChange","onMaxValue","placeholder","value","onMinValue","SettingsValue","App","e","FunctionUpNumber","FunctionResetNumber","ConnectedApp","connect","dispatch","currentTarget","onMaxValueAC","onMinValueAC","SettingsValueAC","FunctionUpNumberAC","FunctionResetNumberAC","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c01a4b16.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport {createStore} from \"redux\";\r\n\r\nexport const ON_MAX_VALUE = \"ON-MAX-VALUE\";\r\nexport const ON_MIN_VALUE = \"ON-MIN-VALUE\";\r\nexport const SETTINGS_VALUE = \" SETTINGS-VALUE\";\r\nexport const FUNCTION_UP_NUMBER = \"FUNCTION-UP-NUMBER\";\r\nexport const FUNCTION_RESET_NUMBER = \"FUNCTION-RESET-NUMBER\";\r\n\r\n\r\nconst initialState = {\r\n    maxNumber: 0,\r\n    displayNumber: \"\",\r\n    minNumber: 0,\r\n    disableClick: true,\r\n    disableReset: true,\r\n    disableSettings: true\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ON_MAX_VALUE:\r\n            if (action.onNewMaxValue > 0\r\n                && action.onNewMaxValue !== state.minNumber\r\n                && state.minNumber < state.maxNumber + 1\r\n            )\r\n                return {\r\n                    ...state,\r\n                    maxNumber: action.onNewMaxValue,\r\n                    displayNumber: \"enter values and press Set\",\r\n                    disableSettings: false,\r\n                    disableClick: true,\r\n                    disableReset: true\r\n                };\r\n            else\r\n                return {\r\n                    ...state,\r\n                    maxNumber: action.onNewMaxValue,\r\n                    disableSettings: true,\r\n                    disableClick: true,\r\n                    disableReset: true\r\n                };\r\n        case ON_MIN_VALUE:\r\n            if (action.onNewMinValue >= 0\r\n                && action.onNewMinValue !== state.maxNumber\r\n                && state.minNumber < state.maxNumber\r\n            ) {\r\n                return {\r\n                    ...state,\r\n                    minNumber: action.onNewMinValue,\r\n                    displayNumber: \"enter values and press SET\",\r\n                    disableSettings: false,\r\n                    disableClick: true,\r\n                    disableReset: true\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    minNumber: action.onNewMinValue,\r\n                    disableSettings: true,\r\n                    disableClick: true,\r\n                    disableReset: true\r\n                }\r\n            }\r\n        case  SETTINGS_VALUE:\r\n            return {\r\n                ...state,\r\n                displayNumber: state.minNumber,\r\n                disableClick: false,\r\n                disableReset: false,\r\n                disableSettings: true\r\n\r\n            };\r\n        case FUNCTION_UP_NUMBER:\r\n\r\n            if (state.displayNumber < state.maxNumber && state.displayNumber + 1 !== state.maxNumber) {\r\n                return {\r\n                    ...state,\r\n                    displayNumber: state.displayNumber + 1,\r\n                }\r\n            } else\r\n                return {\r\n                    ...state,\r\n                    displayNumber: state.displayNumber + 1,\r\n                    disableClick: true\r\n                };\r\n\r\n\r\n        case FUNCTION_RESET_NUMBER:\r\n            return {\r\n                ...state,\r\n                disableClick: false,\r\n                displayNumber: state.minNumber\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n\r\nexport const onMaxValueAC = (e) => {\r\n    return {\r\n        type: ON_MAX_VALUE,\r\n        onNewMaxValue: +e.currentTarget.value\r\n    };\r\n};\r\nexport const onMinValueAC = (e) => {\r\n    return {\r\n        type: ON_MIN_VALUE,\r\n        onNewMinValue: +e.currentTarget.value\r\n    };\r\n};\r\n\r\nexport const SettingsValueAC = (e) => {\r\n    return {\r\n        type: SETTINGS_VALUE,\r\n        SettingsValue: e\r\n    };\r\n};\r\nexport const FunctionUpNumberAC = (e) => {\r\n    return {\r\n        type: FUNCTION_UP_NUMBER,\r\n        FunctionUpNumber: e\r\n    };\r\n};\r\nexport const FunctionResetNumberAC = (e) => {\r\n    return {\r\n        type: FUNCTION_RESET_NUMBER,\r\n        FunctionResetNumber: e\r\n    };\r\n};","import React from 'react';\nimport './Buttons.css';\n\nclass Button extends React.Component {\n    render = () => {\n\n        return (\n            <div className=\"Buttons\">\n                <button\n                    className=\"styleButtons\"\n                    onClick={this.props.onClickFunc}\n                    disabled={this.props.checkDisabled}>\n                    {this.props.title}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport \"./Display.css\";\n\n\nclass Display extends React.Component {\n\n\n    render = () => {\n        {\n            if (this.props.MaxNumber <= this.props.MinNumber\n                || this.props.MinNumber < 0\n                || this.props.MaxNumber < 0) {\n                return <div className=\"incorrect\">\n                    <div>\n                        <div>\n                            incorrect value\n                        </div>\n                    </div>\n                </div>\n            }\n        }\n\n        let displayMax = this.props.displayNumber === this.props.MaxNumber ? \"Max\" : \"Normal\";\n\n        return (\n            <div className=\"Display\">\n                <div className={displayMax}>\n                    <div>\n                        {this.props.displayNumber}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Display;\n","import React from 'react';\nimport \"./Settings.css\";\nimport Button from \"./Buttons\";\n\n\nclass Settings extends React.Component {\n\n\n    render = () => {\n\n        let errorClass = this.props.maxNumber <= this.props.minNumber\n        || this.props.maxNumber < 0\n        || this.props.minNumber < 0 ? 'error' : '';\n\n        return (\n            <div className='Settings'>\n                <div className='Visual'>\n                    <span>max value:</span>\n                    <input\n                        className={errorClass}\n                        onChange={this.props.onMaxValue}\n                        type=\"number\"\n                        placeholder='Введите число'\n                        value={this.props.maxNumber}\n                    />\n                </div>\n                <div className='Visual'>\n                    <span>start value:</span>\n                    <input\n                        className={errorClass}\n                        onChange={this.props.onMinValue}\n                        type=\"number\"\n                        placeholder='Введите число'\n                        value={this.props.minNumber}\n                    />\n                </div>\n                <Button onClickFunc={this.props.SettingsValue}\n                        title=\"Set\"\n                        checkDisabled={this.props.checkDisabled}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Settings;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./componenets/Buttons\";\nimport Display from \"./componenets/Display\";\nimport Settings from \"./componenets/Settings\";\nimport {connect} from \"react-redux\";\nimport {\n    FunctionResetNumberAC,\n    FunctionUpNumberAC,\n    onMaxValueAC,\n    onMinValueAC,\n    SettingsValueAC\n} from \"./componenets/Store\";\n\n\nclass App extends React.Component {\n\n//  при переходе на Redux убираем локальный state,saveState, restoreState,componentDidMount\n    // state = {\n    //     maxNumber: 0,\n    //     displayNumber: \"\",\n    //     minNumber: 0,\n    //     disableClick: true,\n    //     disableReset: true,\n    //     disableSettings: true\n    // };\n\n    // saveState = () => {\n    //     let stateAsString = JSON.stringify(this.state);\n    //     localStorage.setItem(\"counter\", stateAsString);\n    // };\n    //\n    // restoreState = () => {\n    //     let stateAsString = localStorage.getItem(\"counter\");\n    //     if (stateAsString) {\n    //         let state = JSON.parse(stateAsString);\n    //         this.setState(state)\n    //     }\n    // };\n    // componentDidMount = () => {\n    //     this.restoreState()\n    // };\n\n    // считываем max value\n    onMaxValue = (e) => {\n\n        this.props.onMaxValue(e);\n\n        // вся логика переносится в Redux\n        // if (+e.currentTarget.value > 0\n        //     && +e.currentTarget.value !== this.state.minNumber\n        //     && this.state.minNumber < this.state.maxNumber + 1\n        // ) {\n        //     this.setState({\n        //             maxNumber: +e.currentTarget.value,\n        //             displayNumber: \"enter values and press Set\",\n        //             disableSettings: false,\n        //             disableClick: true,\n        //             disableReset: true\n        //\n        //         }, () => {\n        //             this.saveState()\n        //         }\n        //     )\n        // } else {\n        //     this.setState({\n        //             maxNumber: +e.currentTarget.value,\n        //             disableSettings: true,\n        //             disableClick: true,\n        //             disableReset: true\n        //         }, () => {\n        //             this.saveState()\n        //         }\n        //     )\n        // }\n    };\n    // считываем min value\n    onMinValue = (e) => {\n\n        this.props.onMinValue(e);\n\n        // вся логика переносится в Redux\n        // if (+e.currentTarget.value > 0\n        //     && +e.currentTarget.value !== this.state.maxNumber\n        //     && this.state.minNumber < this.state.maxNumber\n        // ) {\n        //     this.setState({\n        //             minNumber: +e.currentTarget.value,\n        //             displayNumber: \"enter values and press SET\",\n        //             disableSettings: false,\n        //             disableClick: true,\n        //             disableReset: true\n        //         }, () => {\n        //             this.saveState()\n        //         }\n        //     )\n        // } else {\n        //     this.setState({\n        //             minNumber: +e.currentTarget.value,\n        //             disableSettings: true,\n        //             disableClick: true,\n        //             disableReset: true\n        //         }, () => {\n        //             this.saveState()\n        //         }\n        //     )\n        // }\n    };\n\n    //передача значения на дисплей\n    SettingsValue = (e) => {\n        this.props.SettingsValue(e);\n\n        // вся логика переносится в Redux\n        // this.setState({\n        //     displayNumber: this.state.minNumber,\n        //     disableClick: false,\n        //     disableReset: false,\n        //     disableSettings: true\n        // }, () => {\n        //     this.saveState()\n        // })\n    };\n\n    FunctionUpNumber = (e) => {\n\n        this.props.FunctionUpNumber(e);\n\n        // вся логика переносится в Redux\n        // if (this.state.displayNumber < this.state.maxNumber) {\n        //     this.setState({displayNumber: this.state.displayNumber + 1},\n        //\n        //         () => {\n        //             this.saveState()\n        //         })\n        // }\n        // if (this.state.displayNumber + 1 === this.state.maxNumber) {\n        //     this.setState({\n        //         disableClick: true\n        //     }, () => {\n        //         this.saveState()\n        //     })\n        // }\n    };\n\n    FunctionResetNumber = (e) => {\n        this.props.FunctionResetNumber(e);\n\n       // вся логика переносится в Redux\n       //  this.setState({\n       //      disableClick: false,\n       //      displayNumber: this.state.minNumber\n       //  }, () => {\n       //      this.saveState()\n       //  })\n    };\n\n    render = () => {\n        return (\n            <div className=\"App\">\n\n                <Settings onMaxValue={this.onMaxValue}\n                          onMinValue={this.onMinValue}\n                          maxNumber={this.props.state.maxNumber}\n                          minNumber={this.props.state.minNumber}\n                          SettingsValue={this.SettingsValue}\n                          checkDisabled={this.props.state.disableSettings}\n                />\n\n                <div className=\"Counter\">\n\n                    <Display displayNumber={this.props.state.displayNumber}\n                             MaxNumber={this.props.state.maxNumber}\n                             MinNumber={this.props.state.minNumber}\n                    />\n\n                    <div className='LocationButtons'>\n                        <Button\n                            onClickFunc={this.FunctionUpNumber}\n                            title=\"Inc\"\n                            checkDisabled={this.props.state.disableClick}/>\n                        <Button\n                            onClickFunc={this.FunctionResetNumber}\n                            title=\"Reset\"\n                            checkDisabled={this.props.state.disableReset}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onMaxValue: (e) => {\n            let action = onMaxValueAC(e);\n            dispatch(action)\n        },\n        onMinValue: (e) => {\n            let action = onMinValueAC(e);\n            dispatch(action)\n        },\n        SettingsValue: (e) => {\n            let action = SettingsValueAC(e);\n            dispatch(action)\n        },\n        FunctionUpNumber: (e) => {\n            let action = FunctionUpNumberAC(e);\n            dispatch(action)\n        },\n        FunctionResetNumber: (e) => {\n            let action = FunctionResetNumberAC(e);\n            dispatch(action)\n        },\n\n    }\n\n};\n\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./componenets/Store\";\nimport ConnectedApp from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <ConnectedApp />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}